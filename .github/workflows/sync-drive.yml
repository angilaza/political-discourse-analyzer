name: Sync to Google Drive

on:
  push:
    branches:
      - main  # Se ejecutará cada vez que haya un push a la rama main
  schedule:
    - cron: '0 12 * * *'  # Se ejecutará automáticamente todos los días a las 12:00 UTC

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install gspread google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

      - name: Create Google Drive Upload Script
        run: |
          cat << 'EOF' > upload.py
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload
          import os
          import json
          import subprocess

          SCOPES = ['https://www.googleapis.com/auth/drive']
          creds_json = os.environ.get('GDRIVE_CREDENTIALS')

          if not creds_json:
              raise Exception('GDRIVE_CREDENTIALS no está definido')

          creds = Credentials.from_service_account_info(json.loads(creds_json), scopes=SCOPES)
          service = build('drive', 'v3', credentials=creds)

          folder_id = '1DPYh6fza2995GHNd8xZy_K5BBtHELbZg'

          # Función para borrar contenido de una carpeta en Google Drive
          def clear_drive_folder(service, folder_id):
              query = f"'{folder_id}' in parents"
              results = service.files().list(q=query, fields='files(id, name)').execute()
              files = results.get('files', [])
              
              # Depurar estructura de archivos obtenidos
              for file in files:
                  print(f"Archivo encontrado: {file}")
                  if 'name' in file:
                      print(f'Borrado: {file["name"]}')
                  else:
                      print('Error: El archivo no contiene un campo "name".')
                  service.files().delete(fileId=file['id']).execute()

          # Función para subir únicamente los archivos versionados en Git
          def upload_tracked_files(parent_folder_id):
              # Obtener la lista de archivos rastreados
              tracked_files = subprocess.check_output(["git", "ls-files"]).decode().splitlines()
              for file in tracked_files:
                  # Excluir este script para evitar subirlo
                  if os.path.basename(file) == 'upload.py':
                      continue
                  file_metadata = {'name': os.path.basename(file), 'parents': [parent_folder_id]}
                  media = MediaFileUpload(file, resumable=True)
                  service.files().create(body=file_metadata, media_body=media).execute()
                  print(f'Subido: {file}')

          # Borrar contenido existente en la carpeta de Google Drive
          clear_drive_folder(service, folder_id)

          # Subir los archivos versionados
          upload_tracked_files(folder_id)

          print('Sincronización completa con Google Drive')
          EOF

      - name: Upload files to Google Drive
        env:
          GDRIVE_CREDENTIALS: ${{ secrets.GDRIVE_CREDENTIALS }}
        run: python upload.py